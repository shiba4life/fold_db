@startuml FoldDB Class Diagram

' Core Components
package "Core" {
    class FoldDB {
        + new()
        + execute_operation()
        + handle_error()
    }

    class Atom {
        - uuid: String
        - source_schema_name: String
        - source_pub_key: String
        - created_at: DateTime<Utc>
        - prev_atom_uuid: Option<String>
        - content: Value
        + new()
        + content()
        + get_transformed_content()
        + uuid()
        + source_schema_name()
        + source_pub_key()
        + created_at()
        + prev_atom_uuid()
    }

    class AtomRef {
        - uuid: String
        - atom_uuid: Option<String>
        - updated_at: DateTime<Utc>
        + new()
        + set_atom_uuid()
        + get_atom_uuid()
        + uuid()
        + updated_at()
    }
    
    class DataFoldNode {
        - config: NodeConfig
        - schema_manager: SchemaManager
        - network_manager: Option<NetworkManager>
        - node_id: String
        + new()
        + load()
        + load_schema()
        + execute_operation()
        + init_network()
        + start_network()
        + stop_network()
        + discover_nodes()
        + connect_to_node()
    }
}

' Schema Management
package "Schema" {
    class SchemaManager {
        - schemas: HashMap<String, Schema>
        - persistence: SchemaPersistence
        + load_schema()
        + validate_schema()
        + get_schema()
        + transform_schema()
        + persist_schema()
        + track_relationships()
    }

    class Schema {
        - name: String
        - fields: Vec<SchemaField>
        - version: String
        - relationships: Vec<SchemaRelationship>
        + validate()
        + transform()
        + get_field_mappings()
        + track_references()
    }

    class SchemaInterpreter {
        + interpret()
        + validate()
        + transform_fields()
        + handle_errors()
    }

    class SchemaField {
        - name: String
        - field_type: String
        - permissions: PermissionPolicy
        - payment_config: SchemaPaymentConfig
        - mappings: Vec<FieldMapping>
        - validation_rules: Vec<ValidationRule>
    }

    class SchemaPersistence {
        + save()
        + load()
        + version_control()
        + track_changes()
    }

    class SchemaRelationship {
        - source_field: String
        - target_field: String
        - relationship_type: RelationType
        + validate()
        + transform()
    }

    class FieldMapping {
        - source_field: String
        - target_field: String
        - transformation_rules: Vec<TransformationRule>
        + apply_transformation()
        + validate_mapping()
    }
}

' Permissions
package "Permissions" {
    class PermissionManager {
        + validate_access()
        + check_trust_distance()
        + handle_permission_error()
    }

    class PermissionWrapper {
        + wrap()
        + unwrap()
        + validate_wrapped_data()
    }

    class PermissionPolicy {
        - read_policy: Policy
        - write_policy: Policy
        + validate()
        + check_policy()
    }
}

' Payment System
package "Fees" {
    class PaymentManager {
        + calculate_fee()
        + verify_payment()
        + generate_invoice()
        + handle_payment_error()
    }

    class PaymentCalculator {
        + calculate()
        + scale_by_trust()
        + validate_payment()
    }

    class LightningClient {
        + create_invoice()
        + verify_payment()
        + handle_network_error()
    }
}

' Error Handling
package "ErrorHandling" {
    class ErrorManager {
        + handle_error()
        + recover()
        + log_error()
    }

    class ErrorContext {
        - error_type: ErrorType
        - context: Value
        - stack_trace: String
        + add_context()
        + get_recovery_action()
    }
}

' Server Components
package "Servers" {
    class UiServer {
        - node: Arc<Mutex<DataFoldNode>>
        + new()
        + run()
        - create_api_routes()
    }
    
    class AppServer {
        - node: Arc<Mutex<DataFoldNode>>
        - logger: AppLogger
        - permission_manager: PermissionManager
        + new()
        + run()
        - create_api_routes()
    }
    
    class AppLogger {
        - log_dir: String
        + new()
        + log_operation()
        + log_security_event()
        + log_debug()
    }
}

' Network Components
package "Network" {
    class NetworkCore {
        - connection_manager: ConnectionManager
        - message_router: MessageRouter
        - query_service: QueryService
        - schema_service: SchemaService
        - discovery: NodeDiscovery
        + new()
        + start()
        + stop()
        + discover_nodes()
        + connect_to_node()
        + query_node()
        + list_available_schemas()
    }
    
    class ConnectionManager {
        - connections: HashMap<NodeId, Connection>
        + new()
        + connect()
        + disconnect()
        + get_connection()
        + send_message()
    }
    
    class MessageRouter {
        - handlers: HashMap<MessageType, Box<dyn MessageHandler>>
        + new()
        + register_handler()
        + route_message()
    }
    
    class QueryService {
        - query_callback: Box<dyn Fn(Query) -> QueryResult>
        - pending_queries: HashMap<Uuid, Sender<QueryResult>>
        + new()
        + execute_query()
        + query_node()
    }
    
    class SchemaService {
        - schema_list_callback: Box<dyn Fn() -> Vec<SchemaInfo>>
        - pending_requests: HashMap<Uuid, Sender<Vec<SchemaInfo>>>
        + new()
        + list_schemas()
        + list_remote_schemas()
    }
}

' Relationships
FoldDB --> SchemaManager
FoldDB --> PermissionManager
FoldDB --> PaymentManager
FoldDB --> ErrorManager
FoldDB --> "*" Atom
Atom --> "0..1" Atom: prev_atom
AtomRef --> "1" Atom: references

DataFoldNode --> FoldDB
DataFoldNode --> SchemaManager
DataFoldNode --> NetworkCore

UiServer --> DataFoldNode: uses
AppServer --> DataFoldNode: uses
AppServer --> AppLogger: uses
AppServer --> PermissionManager: uses

NetworkCore --> ConnectionManager
NetworkCore --> MessageRouter
NetworkCore --> QueryService
NetworkCore --> SchemaService
NetworkCore --> NodeDiscovery

SchemaManager --> "*" Schema
SchemaManager --> SchemaPersistence
Schema --> "*" SchemaField
Schema --> "*" SchemaRelationship
SchemaField --> "*" FieldMapping
SchemaField --> "1" PermissionPolicy
SchemaField --> "1" SchemaPaymentConfig
SchemaManager --> SchemaInterpreter

PermissionManager --> "*" PermissionPolicy
PermissionManager --> PermissionWrapper
PermissionManager --> ErrorManager

PaymentManager --> PaymentCalculator
PaymentManager --> LightningClient
PaymentManager --> ErrorManager

ErrorManager --> "*" ErrorContext

@enduml
