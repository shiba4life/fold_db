// Better Transform DSL Grammar
// A comprehensive grammar for the transform DSL

// Whitespace and comments
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Basic tokens
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
number = @{ "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
boolean = @{ "true" | "false" }
null = @{ "null" }

// Operators with clear precedence
add_op = { "+" | "-" }
mul_op = { "*" | "/" }
pow_op = { "^" }
comp_op = { "==" | "!=" | "<=" | ">=" | "<" | ">" }
logic_op = { "&&" | "||" }
unary_op = { "-" | "!" }

// Field access (obj.field)
field_access = { identifier ~ ("." ~ identifier)+ }

// Function call with arguments
function_call = { identifier ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }

// Atoms (basic values)
atom = {
    number |
    string |
    boolean |
    null |
    function_call |
    field_access |
    identifier |
    "(" ~ expr ~ ")"
}

// Expression precedence hierarchy (bottom-up)
unary_expr = { unary_op* ~ atom }
pow_expr = { unary_expr ~ (pow_op ~ unary_expr)* }
mul_expr = { pow_expr ~ (mul_op ~ pow_expr)* }
add_expr = { mul_expr ~ (add_op ~ mul_expr)* }
comp_expr = { add_expr ~ (comp_op ~ add_expr)* }
logic_expr = { comp_expr ~ (logic_op ~ comp_expr)* }

// Main expression rule
expr = { logic_expr }

// Complete expression with start/end markers
complete_expr = _{ SOI ~ expr ~ EOI }

// Statement types
let_stmt = { "let" ~ identifier ~ "=" ~ expr }
return_stmt = { "return" ~ expr }
expr_stmt = { expr }

// Statement
stmt = { (let_stmt | return_stmt | if_stmt | expr_stmt) ~ ";" }

// If statement
if_stmt = { "if" ~ expr ~ "{" ~ stmt* ~ "}" ~ ("else" ~ "if" ~ expr ~ "{" ~ stmt* ~ "}")* ~ ("else" ~ "{" ~ stmt* ~ "}")? }

// Block of statements
stmt_block = { stmt* }

// Transform declaration components
reversible_decl = { "reversible" ~ ":" ~ boolean }
signature_decl = { "signature" ~ ":" ~ (string | function_call) }
// Logic declaration
logic_decl = { "logic" ~ ":" ~ "{" ~ stmt* ~ "}" }

// Transform declaration
transform_decl = {
    "transform" ~ identifier ~ "{" ~
    reversible_decl? ~
    signature_decl? ~
    logic_decl ~
    "}"
}

// Complete transform declaration with start/end markers
complete_transform = _{ SOI ~ transform_decl ~ EOI }
