//! Compliance report configuration and types
//!
//! This module defines the configuration structures and types for generating
//! compliance reports across different frameworks and time periods.

use crate::reporting::types::{TimeRange, UnifiedReportConfig, UnifiedReportFormat};
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use uuid::Uuid;

use super::compliance_frameworks::ComplianceFramework;

/// Compliance report types
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ComplianceReportType {
    /// Daily operational report
    Daily,
    /// Weekly summary report
    Weekly,
    /// Monthly compliance report
    Monthly,
    /// Quarterly assessment report
    Quarterly,
    /// Annual compliance certification
    Annual,
    /// Incident-specific report
    Incident(Uuid),
    /// Audit trail export
    AuditTrail,
    /// Custom report with specific parameters
    Custom {
        name: String,
        parameters: HashMap<String, String>,
    },
}

/// Compliance report configuration extending unified config
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ComplianceReportConfig {
    /// Base unified report configuration
    pub base_config: UnifiedReportConfig,
    /// Target compliance frameworks
    pub frameworks: Vec<ComplianceFramework>,
    /// Report type
    pub report_type: ComplianceReportType,
    /// Time range for the report
    pub time_range: TimeRange,
    /// Include sections
    pub include_sections: Vec<ReportSection>,
    /// Include raw audit data
    pub include_raw_data: bool,
}

impl ComplianceReportConfig {
    /// Create new compliance report config
    pub fn new(
        frameworks: Vec<ComplianceFramework>,
        report_type: ComplianceReportType,
        time_range: TimeRange,
    ) -> Self {
        Self {
            base_config: UnifiedReportConfig::new(),
            frameworks,
            report_type,
            time_range,
            include_sections: Vec::new(),
            include_raw_data: false,
        }
    }

    /// Convert section enum to unified section names
    pub fn get_unified_sections(&self) -> Vec<String> {
        self.include_sections
            .iter()
            .map(|section| {
                match section {
                    ReportSection::ExecutiveSummary => "executive_summary",
                    ReportSection::RotationStatistics => "rotation_statistics",
                    ReportSection::SecurityIncidents => "security_incidents",
                    ReportSection::ControlAssessment => "control_assessment",
                    ReportSection::AuditTrail => "audit_trail",
                    ReportSection::RiskAssessment => "risk_assessment",
                    ReportSection::PolicyCompliance => "compliance",
                    ReportSection::Recommendations => "recommendations",
                    ReportSection::RawData => "raw_data",
                }
                .to_string()
            })
            .collect()
    }

    /// Check if digital signature is required
    pub fn require_signature(&self) -> bool {
        self.base_config.require_signature
    }

    /// Check if data should be anonymized
    pub fn anonymize_data(&self) -> bool {
        self.base_config.anonymize_data
    }

    /// Get output formats
    pub fn output_formats(&self) -> &Vec<UnifiedReportFormat> {
        &self.base_config.formats
    }
}

/// Report sections to include
#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum ReportSection {
    /// Executive summary
    ExecutiveSummary,
    /// Key rotation statistics
    RotationStatistics,
    /// Security incidents and threats
    SecurityIncidents,
    /// Compliance control assessment
    ControlAssessment,
    /// Audit trail summary
    AuditTrail,
    /// Risk assessment results
    RiskAssessment,
    /// Policy compliance status
    PolicyCompliance,
    /// Recommendations and remediation
    Recommendations,
    /// Raw audit data
    RawData,
}

/// Report metadata
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ReportMetadata {
    /// Report ID
    pub report_id: Uuid,
    /// Report type
    pub report_type: ComplianceReportType,
    /// Target frameworks
    pub frameworks: Vec<ComplianceFramework>,
    /// Generation timestamp
    pub generated_at: DateTime<Utc>,
    /// Report period
    pub period: TimeRange,
    /// Generated by
    pub generated_by: String,
    /// Report version
    pub version: String,
    /// Organization information
    pub organization: OrganizationInfo,
}

/// Organization information
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrganizationInfo {
    /// Organization name
    pub name: String,
    /// Contact information
    pub contact: String,
    /// Compliance officer
    pub compliance_officer: Option<String>,
    /// Auditor information
    pub auditor: Option<String>,
}

/// Export metadata
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ExportMetadata {
    /// Export timestamp
    pub exported_at: DateTime<Utc>,
    /// Export format version
    pub format_version: String,
    /// Data integrity hash
    pub integrity_hash: String,
    /// Export purpose
    pub purpose: String,
    /// Retention requirements
    pub retention_requirements: HashMap<ComplianceFramework, u64>,
}